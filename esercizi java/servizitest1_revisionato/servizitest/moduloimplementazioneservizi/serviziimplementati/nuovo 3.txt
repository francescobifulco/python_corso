	try {

			Paperino p1 = new Paperino();
			Thread t1 = new Thread(p1, "paperino");
			t1.start();

			boolean esito = t1.isAlive();
			System.out.println("thread operante: " + esito);

			t1.join(2000); // --------------------------------------------------------------

			if (t1.isAlive())
				System.out.println("paperino non ha ancora finito");
			else			
				System.out.println("il thread paperino ha finito");

		} catch (Exception e) {
			e.printStackTrace();
		}
		
		implements Runnable {

	@Override
	public void run() {
		
		try {

			Thread t1 = Thread.currentThread();
			for (int i = 0; i < 5; i++) {
				System.out.println(t1.getName() + " " + i);
				Thread.sleep(1000);
			}

		} catch (InterruptedException e) {
			e.printStackTrace();
		
			private char aperta, chiusa;
	private Object semaforo;

	public Paperino(char aperta, char chiusa, Object semaforo) {
		this.aperta = aperta;
		this.chiusa = chiusa;
		this.semaforo = semaforo;
	}

	@Override
	public void run() {

		try {

			for (int i = 0; i < 10; i++)
				synchronized (semaforo) {
					System.out.print(aperta);
					Thread.sleep(100);
					System.out.print(chiusa);
				}

		} catch (Exception e) {
			e.printStackTrace();
		}
		
		try {
			
			Object semaforo = new Object();

			Paperino p1 = new Paperino('(', ')', semaforo);
			Paperino p2 = new Paperino('[', ']', semaforo);
			Paperino p3 = new Paperino('{', '}', semaforo);
			
			Thread t1 = new Thread(p1);
			Thread t2 = new Thread(p2);
			Thread t3 = new Thread(p3);
			
			t1.start();
			t2.start();
			t3.start();			

		} catch (Exception e) {
			e.printStackTrace();
		}