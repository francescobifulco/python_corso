

		try (Risorsa r = new Risorsa();) {

			File f1 = new File("C:\\Users\\Roman\\OneDrive\\Desktop\\prove"); // directory			
			
			File f1b = new File("C:\\Users\\Roman\\OneDrive\\Desktop\\prove\\messaggi.txt");			
			File f2 = new File("C:\\Users\\Roman\\OneDrive\\Desktop\\prove", "messaggi.txt");
			File f3 = new File(f1, "messaggi.txt");
			
			URI uriProva = new URI("file:///C:/Users/Roman/OneDrive/Desktop/prove/messaggi.txt");
			File f4 = new File(uriProva);
			
			System.out.println(f1.isDirectory());
			System.out.println(f2.isFile());
			System.out.println(f4.exists());	

                for (int i = 0;i<5;i++) {
				String nome = "pippo" + Integer.toString(i) + ".txt";
				System.out.println(nome);
				File f = new File("C:\\Users\\Roman\\OneDrive\\Desktop\\prove", nome);
				f.createNewFile();				
			}

			/*File f3 = new File("C:\\Users\\Roman\\OneDrive\\Desktop\\prove\\paperino.txt");
			if (!f3.exists()) {
				File f4 = new File("C:\\Users\\Roman\\OneDrive\\Desktop\\prove\\pippo.txt");
				if (!f4.exists())
					f4.createNewFile();
			}*/

			File f1 = new File("C:\\Users\\Roman\\OneDrive\\Desktop\\prove", "messaggi.txt");
			Date ultimaModifica = new Date(f1.lastModified());
			System.out.println(ultimaModifica);
			System.out.println(f1.length());
			System.out.println();

			File f2 = new File("risorseAccessorie", "nuoviMessaggi.txt");
			System.out.println(f2.getAbsolutePath());
			System.out.println(f2.getPath());
			System.out.println(f2.getParent());
			
			String percorsoPartenza = "C:\\Users\\Roman\\OneDrive\\Desktop\\prove";
			File f1 = new File(percorsoPartenza);

			if (f1.isDirectory()) {				
				Paperino p1 = new Paperino("txt");				
				String[] elenco = f1.list(p1);
				for (String elemento : elenco) {
					File f = new File(percorsoPartenza, elemento);					
					System.out.println(f.getName() + "   " + f.isDirectory());	
			
			File f1 = new File("C:\\Users\\Roman\\OneDrive\\Desktop\\prove\\pippo\\topolino\\pluto");

			boolean creata = f1.mkdirs();
			
			System.out.println(creata);
			
		} catch (Exception e) {
			e.printStackTrace();
		
		
		implements FilenameFilter {
	
	private String estensione;
	
	public Paperino(String estensione) {
		this.estensione = "." + estensione;
	}

	@Override
	public boolean accept(File dir, String name) {		
		return name.endsWith(estensione);		
	}
	
	implements AutoCloseable, Flushable {

	@Override
	public void close() throws IOException {
		System.out.println("la risorsa è stata chiusa regolarmente");		
	}

	@Override
	public void flush() throws IOException {
		// TODO Auto-generated method stub
		
	}
	
	try (InputStream is = new FileInputStream("C:\\Users\\Roman\\OneDrive\\Desktop\\prove\\messaggi.txt");
			 OutputStream os = new FileOutputStream("C:\\Users\\Roman\\OneDrive\\Desktop\\prove\\messaggi uscita.txt");
		) {
			
			
			System.out.println("byte ancora rimasti da leggere: " + is.available());
									
			for (int i = 1; i <= 9; i++) {
				int valore = is.read();
				char carattere = (char) valore;
				System.out.print(carattere);
			}
			
			System.out.println("byte ancora rimasti da leggere: " + is.available()); // 63 - 9 = 54			
			is.skip(5);
			
			byte[] vettoreBuffer = new byte[15];
			is.read(vettoreBuffer);
			
			String s1 = new String(vettoreBuffer);
			System.out.println(s1);
			is.skip(2);
			
			is.transferTo(os);			
			
			

		} catch (Exception e) {
			e.printStackTrace();
		}
		
		try (OutputStream os = new FileOutputStream("C:\\Users\\Roman\\OneDrive\\Desktop\\prove\\messaggi uscita.txt")) {
			
			String messaggio = "salve a tutti, questo è un messaggio di prova";			
			byte[] dati = messaggio.getBytes();
			
			// os.write(dati, 15, 21);
			// os.write(dati);
			
			for (int i=0;i<dati.length;i++)
				os.write(dati[i]);
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	
	