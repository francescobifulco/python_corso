		try {
			
			Thread t1 = Thread.currentThread();			
			t1.setName("thread principale");			
			System.out.println(t1);
			System.out.println();
			System.out.println("nome: " + t1.getName());
			System.out.println("priorit√†: " + t1.getPriority());
			System.out.println("thread operante: " + t1.isAlive());
			
			for (int i = 0; i < 5; i++) {
				System.out.print(i + " ");
				Thread.sleep(1000); // 1000 ms = 1 s 
			}

		} catch (Exception e) {
			e.printStackTrace();
		
		try {

			Paperino p1 = new Paperino();
			Thread t2 = new Thread(p1, "thread pluto");			
			t2.start();
			
			Paperino p2 = new Paperino();
			Thread t3 = new Thread(p2, "thread topolino");			
			t3.start();			
			
			Thread t1 = Thread.currentThread();
			t1.setName("thread principale");
			for (int i = 0; i < 5; i++) {
				System.out.println(t1.getName() + " " + i);
				Thread.sleep(1000); // 1000 ms = 1 s
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		
		public class Paperino implements Runnable {

	@Override
	public void run() {

		try {
			
			Thread t = Thread.currentThread();
			
			for (int i = 0; i < 5; i++) {
				System.out.println(t.getName() + " " + i);
				Thread.sleep(1000); // 1000 ms = 1 s
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

	}
	
	public class Pippo extends Thread {
	
	@Override
	public void run() {

		try {
			
			Thread t = Thread.currentThread();
			
			for (int i = 0; i < 5; i++) {
				System.out.println(t.getName() + " " + i);
				Thread.sleep(1000); // 1000 ms = 1 s
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

	}
